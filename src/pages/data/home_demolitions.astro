---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { processDemolitionData } from "src/utils/home_demolitions.js";
import { formatTimestamp } from "src/utils/wb_daily.js";

// Helper function to format date as mm-dd-yyyy
function formatDateMMDDYYYY(dateString) {
  const date = new Date(dateString);
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const year = date.getFullYear();
  return `${month}-${day}-${year}`;
}

// Fetch and process demolition data
const demolitionData = await processDemolitionData();

const categories = [
  "Total Incidents",
  "Structures",
  "Displaced People",
  "Men Displaced",
  "Women Displaced",
  "Children Displaced"
];

const categoryData = categories.map((category) => {
  let value;
  switch (category) {
    case "Total Incidents":
      value = demolitionData.totalIncidents;
      break;
    case "Structures":
      value = demolitionData.structures;
      break;
    case "Displaced People":
      value = demolitionData.displacedPeople;
      break;
    case "Men Displaced":
      value = demolitionData.menDisplaced;
      break;
    case "Women Displaced":
      value = demolitionData.womenDisplaced;
      break;
    case "Children Displaced":
      value = demolitionData.childrenDisplaced;
      break;
    default:
      value = "0";
  }
  return {
    category,
    value,
    date: demolitionData.newestDateofincident
  };
});

const formattedMostRecentDate = formatDateMMDDYYYY(demolitionData.newestDateofincident);
const formattedMostRecentTimestamp = formatTimestamp(demolitionData.mostRecentTimestamp);

// Determine the date range for the trend
const beginningDate = formatDateMMDDYYYY(demolitionData.oldestDateofincident);
const endDate = formatDateMMDDYYYY(demolitionData.newestDateofincident);
---

<BaseLayout
  isBlogPost={true}
  title="Demolition Data Report"
  description="Demolition data report for the specified region."
>
  <section class="md:px-12 sm:px-8">
    <div class="border-x border-zinc-200 p-8">
      <div style="max-width: 55rem; margin: 0 auto;">
        <h2
          class="text-4xl md:text-6xl xl:text-7xl font-semibold"
          style="margin-bottom: 2.5rem; margin-top: 4.5rem;"
        >
          Demolition Data Report
        </h2>
        <p>
          This dataset represents incidents of demolitions and the number of displaced people in the specified region. 
          The data reflects the reporting as of <span class="highlight-red">{formattedMostRecentDate}</span>. The <span class="highlight-red">5-day average</span> and 
          <span class="highlight-red">30-day average</span> provide insights into the trends over recent days. The <span class="highlight-red">Trend</span> 
          represents the trajectory from {beginningDate} to {endDate}.
        </p>
        <h3 class="text-2xl font-semibold mt-8 text-zinc-800">Data for {formattedMostRecentDate}</h3>
        
        {
          demolitionData.chartData.length > 0 ? (
            <table class="data-table">
              <thead>
                <tr class="header border-y border-zinc-800">
                  <th>Category</th>
                  <th>Total</th>
                  <th class="average">5-day avg</th>
                  <th class="average">30-day avg</th>
                  <th style="width: 300px;">Trend</th>
                </tr>
              </thead>
              <tbody>
                {categoryData.map(({ category, value }) => (
                  <tr key={`report-category-${category}`}>
                    <td data-cell="Category">{category}</td>
                    <td data-cell="Total" class="value">
                      {value}
                    </td>
                    <td
                      data-cell="5 day avg"
                      class="average"
                      id={`five-day-average-${category}`}
                    />
                    <td
                      data-cell="30 day avg"
                      class="average"
                      id={`thirty-day-average-${category}`}
                    />
                    <td class="trend">
                      <div class="canvas-wrapper">
                        <canvas
                          class="line-chart-style"
                          data-cell="Trend"
                          id={`chart-latest-${category}`}
                          height="60"
                        />
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>No reports available.</p>
          )
        }
        <p class="pt-8">
          <a
            href="/data_sheets/demolition_data_report.csv"
            download="demolition_data_report.csv">Download as CSV</a
          >&nbsp;|&nbsp;
          <a
            href="/data_sheets/demolition_data_report.xlsx"
            download="demolition_data_report.xlsx">Download as Excel</a
          >
          &nbsp;|&nbsp;
          <a
            href="/api/demolition_data.json"
            >.JSON endpoint</a
          >
        </p>
        <div
          id="chartData"
          data-reports={JSON.stringify(demolitionData.chartData)}
          style="display:none;"
        >
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", () => {
    async function loadChartJsAndInitializeCharts() {
      const chartJsScript = document.createElement("script");
      chartJsScript.src = "https://cdn.jsdelivr.net/npm/chart.js";
      document.body.appendChild(chartJsScript);

      await new Promise((resolve, reject) => {
        chartJsScript.onload = resolve;
        chartJsScript.onerror = reject;
      });

      initializeCharts();
    }

    function calculateAverage(values, days) {
      const sum = values.reduce((a, b) => a + b, 0);
      return (sum / days).toFixed(2);
    }

    function calculatePercentageIncrease(fiveDayAvg, thirtyDayAvg) {
      if (thirtyDayAvg === 0) {
        return 0;
      }
      return (((fiveDayAvg - thirtyDayAvg) / thirtyDayAvg) * 100).toFixed(2);
    }

    function prepareChartDataForCategory(data, categoryKey) {
      const chartData = [];
      const averages = { fiveDay: [], thirtyDay: [] };

      data.forEach((dayData, index) => {
        const value = dayData[categoryKey] || 0;
        chartData.push(value);

        if (index >= 4) {
          averages.fiveDay.push(calculateAverage(chartData.slice(-5), 5));
        }
        if (index >= 29) {
          averages.thirtyDay.push(calculateAverage(chartData.slice(-30), 30));
        }
      });

      return { chartData, averages };
    }

    function applyConditionalFormatting(element, percentageIncrease) {
      const transparency = Math.min(1, Math.abs(percentageIncrease) / 100);
      if (percentageIncrease > 0) {
        element.style.backgroundColor = `rgba(127, 13, 1, ${transparency})`;
        element.setAttribute("data-after", "↑");
      } else if (percentageIncrease < 0) {
        element.style.backgroundColor = `rgba(40, 169, 224, ${transparency})`;
        element.setAttribute("data-after", "↓");
      } else {
        element.style.backgroundColor = "";
        element.removeAttribute("data-after");
      }
      element.style.fontWeight = transparency >= 0.6 ? "600" : "normal";
      element.style.color = transparency >= 0.6 ? "white" : "";
    }

    function initializeCharts() {
      const chartDataDiv = document.getElementById("chartData");
      const demolitionData = JSON.parse(chartDataDiv.getAttribute("data-reports"));

      const categories = {
        "Total Incidents": "incidents",
        "Structures": "structures",
        "Displaced People": "displacedPeople",
        "Men Displaced": "menDisplaced",
        "Women Displaced": "womenDisplaced",
        "Children Displaced": "childrenDisplaced"
      };
      Object.entries(categories).forEach(([category, key]) => {
        const { chartData, averages } = prepareChartDataForCategory(demolitionData, key);
        const labels = demolitionData.map((data) => data.date);

        const canvasId = `chart-latest-${category}`;
        const canvasElement = document.getElementById(canvasId);
        if (!canvasElement) {
          return;
        }
        const ctx = canvasElement.getContext("2d");

        const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
        gradient.addColorStop(0, "rgba(127, 13, 21, 0.8)");
        gradient.addColorStop(1, "rgba(127, 13, 21, 0.2)");

        new Chart(ctx, {
          type: "line",
          data: {
            labels: labels,
            datasets: [
              {
                label: category,
                data: chartData,
                borderColor: "#7f0d15",
                tension: 0.1,
                borderJoinStyle: "round",
                borderWidth: 1,
                pointRadius: 0.5,
                backgroundColor: gradient,
                fill: true,
              },
            ],
          },
          options: {
            plugins: {
              legend: {
                display: false,
              },
            },
            scales: {
              x: {
                ticks: {
                  display: false,
                },
                grid: {
                  display: false,
                },
              },
              y: {
                ticks: {
                  display: false,
                },
                grid: {
                  display: false,
                },
              },
            },
          },
        });

        const fiveDayAvgElement = document.getElementById(
          `five-day-average-${category}`
        );
        const thirtyDayAvgElement = document.getElementById(
          `thirty-day-average-${category}`
        );
        if (fiveDayAvgElement && thirtyDayAvgElement) {
          const fiveDayAvg = averages.fiveDay[averages.fiveDay.length - 1];
          const thirtyDayAvg = averages.thirtyDay[averages.thirtyDay.length - 1];

          fiveDayAvgElement.textContent = fiveDayAvg;
          thirtyDayAvgElement.textContent = thirtyDayAvg;

          const percentageIncrease = calculatePercentageIncrease(
            parseFloat(fiveDayAvg),
            parseFloat(thirtyDayAvg)
          );
          applyConditionalFormatting(fiveDayAvgElement, percentageIncrease);
        }
      });
    }

    function handleIntersection(entries, observer) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          loadChartJsAndInitializeCharts();
          observer.unobserve(entry.target);
        }
      });
    }

    const observer = new IntersectionObserver(handleIntersection, {
      root: null,
      threshold: 0.1,
    });

    const chartContainers = document.querySelectorAll(".data-table");
    chartContainers.forEach((container) => observer.observe(container));
  });
</script>
