---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getGazaDestructionData } from "src/utils/gaza-destruction.js";

// Fetch and process Gaza destruction data
const { latestReport, fullData } = await getGazaDestructionData();

// Category data extraction from latest report
const categoryData = [
  { category: "Civic Buildings Destroyed", value: latestReport.civic_buildings.ext_destroyed, average: latestReport.civic_buildings['daily_average_ext_destroyed'], estimatedCost: latestReport.civic_buildings['estimated_cost_ext_destroyed'] },
  { category: "Educational Buildings Destroyed", value: latestReport.educational_buildings.ext_destroyed, average: latestReport.educational_buildings['daily_average_ext_destroyed'], estimatedCost: latestReport.educational_buildings['estimated_cost_ext_destroyed'] },
  { category: "Educational Buildings Damaged", value: latestReport.educational_buildings.ext_damaged, average: latestReport.educational_buildings['daily_average_ext_damaged'], estimatedCost: latestReport.educational_buildings['estimated_cost_ext_damaged'] },
  { category: "Mosques Destroyed", value: latestReport.places_of_worship.ext_mosques_destroyed, average: latestReport.places_of_worship['daily_average_ext_mosques_destroyed'], estimatedCost: latestReport.places_of_worship['estimated_cost_ext_mosques_destroyed'] },
  { category: "Mosques Damaged", value: latestReport.places_of_worship.ext_mosques_damaged, average: latestReport.places_of_worship['daily_average_ext_mosques_damaged'], estimatedCost: latestReport.places_of_worship['estimated_cost_ext_mosques_damaged'] },
  { category: "Churches Destroyed", value: latestReport.places_of_worship.ext_churches_destroyed, average: latestReport.places_of_worship['daily_average_ext_churches_destroyed'], estimatedCost: latestReport.places_of_worship['estimated_cost_ext_churches_destroyed'] },
  { category: "Residential Destroyed", value: latestReport.residential.ext_destroyed, average: latestReport.residential['daily_average_ext_destroyed'], estimatedCost: latestReport.residential['estimated_cost_ext_destroyed'] }
];

// Calculate totals for all categories
const totals = {
  value: categoryData.reduce((sum, { value }) => sum + (value || 0), 0),
  average: categoryData.reduce((sum, { average }) => sum + (average || 0), 0),
  estimatedCost: categoryData.reduce((sum, { estimatedCost }) => sum + (estimatedCost || 0), 0)
};

// Calculate combined trend data
const combinedTrend = fullData.map((_, index) => {
  let dailyTotal = 0;
  categoryData.forEach(({ category }) => {
    const field = category.toLowerCase().replace(/\s/g, '_').replace(/\b_destroyed\b|\b_damaged\b/g, '') + '.ext_destroyed';
    const parts = field.split('.');
    const value = parts.reduce((obj, part) => obj?.[part], fullData[index]) || 0;
    dailyTotal += value;
  });
  return dailyTotal;
});

// Format date
function formatDateMMDDYYYY(dateString) {
  const date = new Date(dateString);
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const year = date.getFullYear();
  return `${month}.${day}.${year}`;
}

const formattedMostRecentDate = latestReport ? formatDateMMDDYYYY(latestReport.report_date) : "N/A";
const serializedReports = JSON.stringify(fullData);
console.log(formattedMostRecentDate, "gaza destuction single page date");
---

<BaseLayout
  isBlogPost={true}
  title="Gaza Destruction Report"
  description="Damage as the result of the Israeli genocide of Gaza"
>
  <section class="md:px-12 sm:px-8">
    <div class="border-x border-zinc-800 p-8">
      <div style="max-width: 55rem; margin: 0 auto;">
        <h1
          class="text-4xl md:text-6xl xl:text-7xl font-semibold"
          style="margin-bottom: 2.5rem; margin-top: 4.5rem;"
        >
          Gaza Damage Reports
        </h1>
        <h2 class="text-2xl mb-4 highlight-red">The ongoing genocide</h2>
        <p>Israel's ongoing genocide in the Gaza Strip has caused unprecedented loss of life, forced displacement, and destruction of infrastructure. By January 2024, some estimated the damage to Gaza's infrastructure had reached $18.5 billion, equating to 97% of the 2022 GDP of the West Bank and Gaza. Most of this destruction was concentrated in residential buildings (72%) and the commerce, industry, and services sectors (9%). Other critical infrastructures such as education, water, sanitation, health, energy, ICT, municipal services, and transport account for the remaining 19%. Most damages occurred in Gaza, North Gaza, and Khan Younis. This, of course, was methodical and intentional.</p>

        <p>As of March 14, Israel killed well over 31,000 people with the backing of the US and the broader Democratic Party, 70% of whom are women and children. 1.7 million have been displaced. Engineering food shortages has always been a method of ethnic cleansing. For years, Israel had monitored the literal calories entering Gaza as a result of their land, air, and sea siege. At the time of this writing, in June 2024, more than half of Gaza's population is on the brink of famine, with nearly 80% facing acute food insecurity. Palestinians in Gaza make up 80% of those facing severe hunger worldwide. Water shortages have left them with less than half the daily ration needed for survival. Over 1 million people have lost their homes as a result of Israel's carpet bombings, and 84% of health facilities have been destroyed or damaged, leaving them without access to essential medicines, treatments, electricity, and water. The education system has collapsed, with all children out of school and many schools used as shelters for internally displaced people. Approximately 17,000 children have been separated from their families, increasing their vulnerability to exploitation and abuse. These numbers are likely much higher. The pervasive violence has severely impacted mental health, especially among women, children, older people, and persons with disabilities.</p>

        <p>Our cost estimates are synthesized from multiple sources to understand the financial impact comprehensively. The raw data, excluding financial estimates, comes from Tech for Palestine. We utilize their verified data to build our visualization and advocacy programs. These resources, though still under development, are crucial for advocates and activists to counter the lies of imperialism and highlight the true extent of the humanitarian crisis in Gaza.</p>

        <h3 class="text-2xl font-semibold mt-8 text-zinc-800">Data for {formattedMostRecentDate}</h3>
        
        {latestReport ? (
          <table class="data-table">
            <thead>
              <tr class="header border-y border-zinc-800">
                <th>Category</th>
                <th>Total</th>
                <th class="average">Daily avg</th>
                <th class="average">Estimated Cost</th>
                <th style="width: 300px;">Trend</th>
              </tr>
            </thead>
            <tbody>
              {categoryData.map(({ category, value, average, estimatedCost }) => (
                <tr key={`report-category-${category}`}>
                  <td data-cell="Category">{category}</td>
                  <td data-cell="Total" class="value">{value}</td>
                  <td data-cell="Daily avg" class="average">{average?.toFixed(2) || 'N/A'}</td>
                  <td data-cell="Estimated Cost" class="average">${estimatedCost?.toLocaleString() || 'N/A'}</td>
                  <td class="trend">
                    <div class="canvas-wrapper">
                      <canvas
                        class="line-chart-style"
                        data-cell="Trend"
                        id={`chart-latest-${category.replace(/\bext\b/g, '').replace(/\s/g, '-').toLowerCase()}`}
                        height="60"
                      />
                    </div>
                  </td>
                </tr>
              ))}
              <tr class="totals font-semibold">
                <td data-cell="Category">Totals</td>
                <td data-cell="Total" class="value">{totals.value}</td>
                <td data-cell="Daily avg" class="average">{totals.average?.toFixed(2) || 'N/A'}</td>
                <td data-cell="Estimated Cost" class="average">${totals.estimatedCost?.toLocaleString() || 'N/A'}</td>
                <td class="trend">
                  <div class="canvas-wrapper">
                    <canvas
                      class="line-chart-style"
                      data-cell="Trend"
                      id="chart-latest-totals"
                      height="60"
                    />
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        ) : (
          <p>No reports available.</p>
        )}
        <p class="pt-8">
          <a
            href="data_sheets/gaza_destruction_report.csv"
            download="gaza_destruction_report.csv">Download as CSV</a
          >&nbsp;|&nbsp;
          <a
            href="data_sheets/gaza_destruction_report.xlsx"
            download="gaza_destruction_report.xlsx">Download as Excel</a
          >
          &nbsp;|&nbsp;
          <a
            href="https://data.techforpalestine.org/api/v3/infrastructure-damaged.json"
            >.JSON endpoint</a
          >
        </p>
        <div
          id="chartData"
          data-reports={serializedReports}
          style="display:none;"
        >
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script type="text/javascript">

document.addEventListener("DOMContentLoaded", async () => {
  async function loadChartJsAndInitializeCharts() {
    const chartJsScript = document.createElement("script");
    chartJsScript.src = "https://cdn.jsdelivr.net/npm/chart.js";
    document.body.appendChild(chartJsScript);

    await new Promise((resolve, reject) => {
      chartJsScript.onload = () => resolve();
      chartJsScript.onerror = (error) => reject(error);
    });

    initializeCharts();
  }

  function prepareChartDataForCategory(reports, field) {
    const chartData = [];

    reports.forEach((report) => {
      const value = field.split('.').reduce((obj, part) => obj?.[part], report) || 0;
      chartData.push(value);
    });

    return { chartData };
  }

  function generateCanvasId(category) {
    return `chart-latest-${category.replace(/\bext\b/g, '').replace(/\s+/g, '-').replace(/^-|-$/g, '').toLowerCase()}`;
  }

  function initializeCharts() {
    const chartDataDiv = document.getElementById("chartData");
    if (!chartDataDiv) return;

    const serializedReports = chartDataDiv.getAttribute("data-reports");
    if (!serializedReports) return;

    let reports;
    try {
      reports = JSON.parse(serializedReports);
    } catch (error) {
      console.error("Error parsing reports data:", error);
      return;
    }

    const categories = [
      "civic_buildings.ext_destroyed",
      "educational_buildings.ext_destroyed",
      "educational_buildings.ext_damaged",
      "places_of_worship.ext_mosques_destroyed",
      "places_of_worship.ext_mosques_damaged",
      "places_of_worship.ext_churches_destroyed",
      "residential.ext_destroyed"
    ];

    const combinedTrend = reports.map((_, index) => {
      return categories.reduce((sum, field) => {
        const value = field.split('.').reduce((obj, part) => obj?.[part], reports[index]) || 0;
        return sum + value;
      }, 0);
    });

    categories.forEach((field) => {
      let category = field.replace(/\bext\b/g, '').replace(/_/g, ' ').replace(/\./g, ' ').toLowerCase();
      category = category.replace('places of worship ', '');

      const { chartData } = prepareChartDataForCategory(reports, field);
      const labels = reports.map((report) => report.report_date);

      const canvasId = generateCanvasId(category);
      const canvasElement = document.getElementById(canvasId);
      if (!canvasElement) return;

      const ctx = canvasElement.getContext("2d");

      const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
      gradient.addColorStop(0, "rgba(127, 13, 21, 0.8)");
      gradient.addColorStop(1, "rgba(127, 13, 21, 0.2)");

      new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [
            {
              label: category,
              data: chartData,
              borderColor: "#7f0d15",
              tension: 0.1,
              borderJoinStyle: "round",
              borderWidth: 1,
              pointRadius: 0.5,
              backgroundColor: gradient,
              fill: true,
            },
          ],
        },
        options: {
          plugins: {
            legend: {
              display: false,
            },
          },
          scales: {
            x: {
              ticks: {
                display: false,
              },
              grid: {
                display: false,
              },
            },
            y: {
              ticks: {
                display: false,
              },
              grid: {
                display: false,
              },
            },
          },
        },
      });
    });

    const summaryCanvasId = "chart-latest-totals";
    const summaryCanvasElement = document.getElementById(summaryCanvasId);
    if (summaryCanvasElement) {
      const ctx = summaryCanvasElement.getContext("2d");
      const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
      gradient.addColorStop(0, "rgba(127, 13, 21, 0.8)");
      gradient.addColorStop(1, "rgba(127, 13, 21, 0.2)");

      new Chart(ctx, {
        type: "line",
        data: {
          labels: reports.map((report) => report.report_date),
          datasets: [
            {
              label: "Totals",
              data: combinedTrend,
              borderColor: "#7f0d15",
              tension: 0.1,
              borderJoinStyle: "round",
              borderWidth: 1,
              pointRadius: 0.5,
              backgroundColor: gradient,
              fill: true,
            },
          ],
        },
        options: {
          plugins: {
            legend: {
              display: false,
            },
          },
          scales: {
            x: {
              ticks: {
                display: false,
              },
              grid: {
                display: false,
              },
            },
            y: {
              ticks: {
                display: false,
              },
              grid: {
                display: false,
              },
            },
          },
        },
      });
    }
  }

  function handleIntersection(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        loadChartJsAndInitializeCharts();
        observer.unobserve(entry.target);
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, {
    root: null,
    threshold: 0.1,
  });

  const chartContainers = document.querySelectorAll(".data-table");
  chartContainers.forEach((container) => observer.observe(container));
});

</script>
