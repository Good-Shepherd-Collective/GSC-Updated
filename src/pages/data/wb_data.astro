---
import BaseLayout from "@/layouts/BaseLayout.astro";
import fetchDailyReport, {
  formatDateToString,
  formatTimestamp,
} from "src/utils/wb_daily.js";

// Helper function to format date as mm-dd-yyyy
function formatDateMMDDYYYY(dateString) {
  const date = new Date(dateString);
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const year = date.getFullYear();
  return `${month}-${day}-${year}`;
}

// Fetch and format reports data
const reports = await fetchDailyReport();
const serializedReports = JSON.stringify(reports);

const categories = [
  "Deaths",
  "Military checkpoints",
  "Settler attacks",
  "Road closures",
  "Confiscation of property",
  "Injuries",
  "Temporary checkpoints",
  "Invasions",
];
const categoryData = categories.map((category) => {
  const mostRecentReport = reports.reduce((latest, report) => {
    const latestDate = new Date(latest.metadata.Date);
    const currentDate = new Date(report.metadata.Date);
    return currentDate > latestDate ? report : latest;
  }, reports[0]);

  let categoryItem = mostRecentReport.data.find(
    (item) => item["Description English"] === category
  );
  if (!categoryItem) {
    categoryItem = { "Description English": category, Value: "0" };
  }

  return {
    category,
    value: categoryItem["Value"],
    date: mostRecentReport.metadata.Date,
  };
});

const mostRecentReport = reports.reduce((latest, report) => {
  const latestDate = new Date(latest.metadata.Date);
  const currentDate = new Date(report.metadata.Date);
  return currentDate > latestDate ? report : latest;
}, reports[0]);

const formattedMostRecentDate = formatDateMMDDYYYY(
  mostRecentReport.metadata.Date
);
const formattedMostRecentTimestamp = formatTimestamp(
  mostRecentReport.metadata.Timestamp
);

// Determine the date range for the trend
const beginningDate = formatDateMMDDYYYY(reports[0].metadata.Date);
const endDate = formatDateMMDDYYYY(reports[reports.length - 1].metadata.Date);
---


<BaseLayout
  isBlogPost={true}
  title="Daily Report"
  description="Daily report of settler-colonial violence in the West Bank and East Jerusalem."
>
  <section class="md:px-12 sm:px-8">
    <div class="border-x border-zinc-200 p-8">
      <div style="max-width: 55rem; margin: 0 auto;">
        <h1
          class="text-4xl md:text-6xl xl:text-7xl font-semibold"
          style="margin-bottom: 2.5rem; margin-top: 4.5rem;"
        >
          West Bank & East Jerusalem
        </h1>
        <h2 class="text-2xl mb-4 highlight-red">Structures of violence</h2>
        <p>
          This data set represents a small subsection of Israeli
          settler-colonial violence. These figures represent reporting from only
          the West Bank and East Jerusalem and do not account for the colonial
          violence enacted upon Palestinians who live within the 1948 borders of
          historical Palestine.<br><br>
          The <span class="highlight-red">Total</span> amount in the first column reflects the aggregate of a
          single day on the date of <span class="highlight-red">{formattedMostRecentDate}</span>. The <span class="highlight-red">5-day average</span> represents the
          average of the last five days, as the <span class="highlight-red">10-day average</span> represents the
          average of the previous ten days. The <span class="highlight-red">Trend</span> represents the trajectory
          from {beginningDate} to {endDate}.<br><br>The datum here is translated and compiled from
          Palestinian institutions. This particular data set is based on
          reporting from the Palestinian Negotiations Affairs Department.
        </p>
        <h3 class="text-2xl font-semibold mt-8 text-zinc-800">Data for {formattedMostRecentDate}</h3>
        
        {
          reports.length > 0 ? (
            <table class="data-table">
              <thead>
                <tr class="header border-y border-zinc-800">
                  <th>Category</th>
                  <th>Total</th>
                  <th class="average">5-day avg</th>
                  <th class="average">10-day avg</th>
                  <th style="width: 300px;">Trend</th>
                </tr>
              </thead>
              <tbody>
                {categoryData.map(({ category, value }) => (
                  <tr key={`report-category-${category}`}>
                    <td data-cell="Category">{category}</td>
                    <td data-cell="Total" class="value">
                      {value}
                    </td>
                    <td
                      data-cell="5 day avg"
                      class="average "
                      id={`five-day-average-${category}`}
                    />
                    <td
                      data-cell="10 day avg"
                      class="average "
                      id={`ten-day-average-${category}`}
                    />
                    <td class="trend">
                      <div class="canvas-wrapper">
                        <canvas
                          class="line-chart-style"
                          data-cell="Trend"
                          id={`chart-latest-${category}`}
                          height="60"
                        />
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>No reports available.</p>
          )
        }
        <p class="pt-8">
          <a
            href="/data_sheets/wb_daily_report.csv"
            download="wb_daily_report.csv">Download as CSV</a
          >&nbsp;|&nbsp;
          <a
            href="/data_sheets/wb_daily_report.xlsx"
            download="wb_daily_report.xlsx">Download as Excel</a
          >
          &nbsp;|&nbsp;
          <a
            href="/api/wb_data.json"
            >.JSON endpoint</a
          >
        </p>
        <div
          id="chartData"
          data-reports={serializedReports}
          style="display:none;"
        >
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", () => {
    async function loadChartJsAndInitializeCharts() {
      // console.log("Loading Chart.js dynamically...");

      const chartJsScript = document.createElement("script");
      chartJsScript.src = "https://cdn.jsdelivr.net/npm/chart.js";
      document.body.appendChild(chartJsScript);

      await new Promise((resolve, reject) => {
        chartJsScript.onload = resolve;
        chartJsScript.onerror = reject;
      });

      // console.log("Chart.js loaded. Initializing charts...");
      initializeCharts();
    }

    function calculateAverage(values) {
      const sum = values.reduce((a, b) => a + b, 0);
      return (sum / values.length).toFixed(2);
    }

    function calculatePercentageIncrease(fiveDayAvg, tenDayAvg) {
      if (tenDayAvg === 0) {
        return 0;
      }
      return (((fiveDayAvg - tenDayAvg) / tenDayAvg) * 100).toFixed(2);
    }

    function prepareChartDataForCategory(reports, description) {
      const chartData = [];
      const averages = { fiveDay: [], tenDay: [] };

      reports.forEach((report, index) => {
        const dataItem = report.data.find(
          (item) => item["Description English"] === description
        );
        const value = dataItem ? parseInt(dataItem.Value, 10) : 0;
        chartData.push(value);

        if (index >= 4) {
          averages.fiveDay.push(calculateAverage(chartData.slice(-5)));
        }
        if (index >= 9) {
          averages.tenDay.push(calculateAverage(chartData.slice(-10)));
        }
      });

      return { chartData, averages };
    }

    function applyConditionalFormatting(element, percentageIncrease) {
      const transparency = Math.min(1, Math.abs(percentageIncrease) / 100);
      if (percentageIncrease > 0) {
        element.style.backgroundColor = `rgba(127, 13, 1, ${transparency})`;
        element.setAttribute("data-after", "↑");
      } else if (percentageIncrease < 0) {
        element.style.backgroundColor = `rgba(40, 169, 224, ${transparency})`;
        element.setAttribute("data-after", "↓");
      } else {
        element.style.backgroundColor = "";
        element.removeAttribute("data-after");
      }
      element.style.fontWeight = transparency >= 0.6 ? "600" : "normal";
      element.style.color = transparency >= 0.6 ? "white" : "";
    }

    function initializeCharts() {
      const chartDataDiv = document.getElementById("chartData");
      let reports = JSON.parse(chartDataDiv.getAttribute("data-reports"));

      reports.sort(
        (a, b) => new Date(a.metadata.Date) - new Date(b.metadata.Date)
      );

      const categories = [
        "Deaths",
        "Military checkpoints",
        "Settler attacks",
        "Road closures",
        "Confiscation of property",
        "Injuries",
        "Temporary checkpoints",
        "Invasions",
      ];
      categories.forEach((selectedCategory) => {
        const { chartData, averages } = prepareChartDataForCategory(
          reports,
          selectedCategory
        );
        const labels = reports.map((report) => report.metadata.Date);

        const canvasId = `chart-latest-${selectedCategory}`;
        const canvasElement = document.getElementById(canvasId);
        if (!canvasElement) {
          // console.error(`Canvas element not found for ID: ${canvasId}`);
          return;
        }
        const ctx = canvasElement.getContext("2d");

        const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
        gradient.addColorStop(0, "rgba(127, 13, 21, 0.8)"); // Slightly transparent red
        gradient.addColorStop(1, "rgba(127, 13, 21, 0.2)"); // Fully transparent

        new Chart(ctx, {
          type: "line",
          data: {
            labels: labels,
            datasets: [
              {
                label: selectedCategory,
                data: chartData,
                borderColor: "#7f0d15",
                tension: 0.1,
                borderJoinStyle: "round",
                borderWidth: 1,
                pointRadius: 0.5,
                backgroundColor: gradient,
                fill: true,
              },
            ],
          },
          options: {
            plugins: {
              legend: {
                display: false,
              },
            },
            scales: {
              x: {
                ticks: {
                  display: false,
                },
                grid: {
                  display: false,
                },
              },
              y: {
                ticks: {
                  display: false,
                },
                grid: {
                  display: false,
                },
              },
            },
          },
        });

        const fiveDayAvgElement = document.getElementById(
          `five-day-average-${selectedCategory}`
        );
        const tenDayAvgElement = document.getElementById(
          `ten-day-average-${selectedCategory}`
        );
        if (fiveDayAvgElement && tenDayAvgElement) {
          const fiveDayAvg = averages.fiveDay[averages.fiveDay.length - 1];
          const tenDayAvg = averages.tenDay[averages.tenDay.length - 1];

          fiveDayAvgElement.textContent = fiveDayAvg;
          tenDayAvgElement.textContent = tenDayAvg;

          const percentageIncrease = calculatePercentageIncrease(
            parseFloat(fiveDayAvg),
            parseFloat(tenDayAvg)
          );
          applyConditionalFormatting(fiveDayAvgElement, percentageIncrease);
        }
      });
    }

    function handleIntersection(entries, observer) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // console.log("Chart container is in view. Loading Chart.js...");
          loadChartJsAndInitializeCharts();
          observer.unobserve(entry.target);
        }
      });
    }

    const observer = new IntersectionObserver(handleIntersection, {
      root: null,
      threshold: 0.1,
    });

    const chartContainers = document.querySelectorAll(".data-table");
    chartContainers.forEach((container) => observer.observe(container));
  });
</script>

