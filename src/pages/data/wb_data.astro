---
import BaseLayout from "@/layouts/BaseLayout.astro";
import fetchDailyReport, { formatDateToString, formatTimestamp } from "src/utils/wb_daily.js";

// Fetch and format reports data
const reports = await fetchDailyReport();
const serializedReports = JSON.stringify(reports);

const categories = ["Deaths", "Military checkpoints", "Settler attacks", "Road closures", "Confiscation of property", "Injuries", "Temporary checkpoints", "Invasions" ];
const categoryData = categories.map(category => {
  const mostRecentReport = reports.reduce((latest, report) => {
    const latestDate = new Date(latest.metadata.Date);
    const currentDate = new Date(report.metadata.Date);
    return currentDate > latestDate ? report : latest;
  }, reports[0]);

  let categoryItem = mostRecentReport.data.find(item => item["Description English"] === category);
  if (!categoryItem) {
    categoryItem = { "Description English": category, "Value": "0" };
  }

  return {
    category,
    value: categoryItem["Value"],
    date: mostRecentReport.metadata.Date
  };
});

const mostRecentReport = reports.reduce((latest, report) => {
  const latestDate = new Date(latest.metadata.Date);
  const currentDate = new Date(report.metadata.Date);
  return currentDate > latestDate ? report : latest;
}, reports[0]);

const formattedMostRecentDate = formatDateToString(mostRecentReport.metadata.Date);
const formattedMostRecentTimestamp = formatTimestamp(mostRecentReport.metadata.Timestamp);
---

<BaseLayout title="Daily Report" description="Daily report of settler-colonial violence in the West Bank and East Jerusalem.">
  <section class="md:px-12 sm:px-8">
    <div class="border-x border-zinc-800 p-8">
      <div style="max-width: 55rem; margin: 0 auto;">
        <h2 class="text-4xl md:text-6xl xl:text-7xl text-white" style="margin-bottom: 2.5rem;">Daily Report</h2>
        <p>This data set represents a small subsection of Israeli settler-colonial violence. These figures represent reporting from the West Bank and East Jerusalem and does not account for the colonial violence enacted upon Palestinians residing in the lands of occupied Palestine in 1948. However, the <code>Deaths</code> total includes the Palestinians Israel has killed in Gaza. The datum here is translated and compiled from Palestinian institutions. This particular data set is based on Palestinian Negotiations Affairs Department information. The <code>Total</code> amount reflects the aggregate of a single day on the date of {formattedMostRecentDate}.</p>
        {reports.length > 0 ? (
          <table class="nad">
            <thead>
              <tr class="header border-y border-zinc-800">
                <th>Category</th>
                <th>Total</th>
                <th>5 day avg</th>
                <th>10 day avg</th>
                <th style="width: 300px;">Trend</th>
              </tr>
            </thead>
            <tbody>
              {categoryData.map(({ category, value }) => (
                <tr key={`report-category-${category}`}>
                  <td data-cell="Category">{category}</td>
                  <td data-cell="Total" class="value">{value}</td>
                  <td data-cell="5 day avg" class="average text-center" id={`five-day-average-${category}`}></td>
                  <td data-cell="10 day avg" class="average text-center" id={`ten-day-average-${category}`}></td>
                  <td class="trend">
                    <div class="trend-title"></div>
                    <canvas style="width: 300px;" data-cell="Trend" id={`chart-latest-${category}`} height="60"></canvas>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p>No reports available.</p>
        )}
        <p class="time__stamp pt-8">Data updated: {formattedMostRecentTimestamp}&nbsp;|&nbsp;<a href="/data/daily_report.csv" download="daily_report.csv">Download as CSV</a>&nbsp;|&nbsp;
          <a href="/data/daily_report.xlsx" download="daily_report.xlsx">Download as Excel</a> </p>
        <div id="chartData" data-reports={serializedReports} style="display:none;"></div>
      </div>
    </div>
  </section>
</BaseLayout>

<script type="text/javascript">
document.addEventListener("DOMContentLoaded", () => {
  async function loadChartJsAndInitializeCharts() {
    console.log("Loading Chart.js dynamically...");

    const chartJsScript = document.createElement('script');
    chartJsScript.src = 'https://cdn.jsdelivr.net/npm/chart.js';
    document.body.appendChild(chartJsScript);

    await new Promise((resolve, reject) => {
      chartJsScript.onload = resolve;
      chartJsScript.onerror = reject;
    });

    console.log("Chart.js loaded. Initializing charts...");
    initializeCharts();
  }

  function calculateAverage(values) {
    const sum = values.reduce((a, b) => a + b, 0);
    return (sum / values.length).toFixed(2);
  }

  function calculatePercentageIncrease(fiveDayAvg, tenDayAvg) {
    if (tenDayAvg === 0) {
      return 0;
    }
    return ((fiveDayAvg - tenDayAvg) / tenDayAvg * 100).toFixed(2);
  }

  function prepareChartDataForCategory(reports, description) {
    const chartData = [];
    const averages = { fiveDay: [], tenDay: [] };

    reports.forEach((report, index) => {
      const dataItem = report.data.find(item => item["Description English"] === description);
      const value = dataItem ? parseInt(dataItem.Value, 10) : 0;
      chartData.push(value);

      if (index >= 4) {
        averages.fiveDay.push(calculateAverage(chartData.slice(-5)));
      }
      if (index >= 9) {
        averages.tenDay.push(calculateAverage(chartData.slice(-10)));
      }
    });

    return { chartData, averages };
  }

  function applyConditionalFormatting(element, percentageIncrease) {
    const transparency = Math.min(1, Math.abs(percentageIncrease) / 100);
    if (percentageIncrease > 0) {
      element.style.backgroundColor = `rgba(127, 13, 1, ${transparency})`;
      element.setAttribute('data-after', '↑');
    } else if (percentageIncrease < 0) {
      element.style.backgroundColor = `rgba(40, 169, 224, ${transparency})`;
      element.setAttribute('data-after', '↓');
    } else {
      element.style.backgroundColor = '';
      element.removeAttribute('data-after');
    }
    element.style.fontWeight = transparency >= 0.6 ? '600' : 'normal';
    element.style.color = transparency >= 0.6 ? 'white' : '';
  }

  function initializeCharts() {
    const chartDataDiv = document.getElementById("chartData");
    let reports = JSON.parse(chartDataDiv.getAttribute("data-reports"));

    reports.sort((a, b) => new Date(a.metadata.Date) - new Date(b.metadata.Date));

    const categories = ["Deaths", "Military checkpoints", "Settler attacks", "Road closures", "Building the separation wall", "Confiscation of property", "Injuries", "Temporary checkpoints", "Invasions" ];
    categories.forEach(selectedCategory => {
      const { chartData, averages } = prepareChartDataForCategory(reports, selectedCategory);
      const labels = reports.map(report => report.metadata.Date);

      const canvasId = `chart-latest-${selectedCategory}`;
      const canvasElement = document.getElementById(canvasId);
      if (!canvasElement) {
        console.error(`Canvas element not found for ID: ${canvasId}`);
        return;
      }
      const ctx = canvasElement.getContext("2d");

      const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
      gradient.addColorStop(0, '#7f0d15');
      gradient.addColorStop(0.05, 'rgba(127, 13, 21, 0.5)');
      gradient.addColorStop(0.45, 'rgba(127, 13, 21, 0)');

      new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [{
            label: selectedCategory,
            data: chartData,
            borderColor: "#7f0d15",
            tension: 0.1,
            borderJoinStyle: 'round',
            borderWidth: 1,
            pointRadius: .5,
            backgroundColor: gradient,
            fill: true,
          }]
        },
        options: {
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            x: {
              ticks: {
                display: false
              },
              grid: {
                display: false,
              }
            },
            y: {
              ticks: {
                display: false
              },
              grid: {
                display: false,
              }
            }
          }
        }
      });

      const fiveDayAvgElement = document.getElementById(`five-day-average-${selectedCategory}`);
      const tenDayAvgElement = document.getElementById(`ten-day-average-${selectedCategory}`);
      if (fiveDayAvgElement && tenDayAvgElement) {
        const fiveDayAvg = averages.fiveDay[averages.fiveDay.length - 1];
        const tenDayAvg = averages.tenDay[averages.tenDay.length - 1];

        fiveDayAvgElement.textContent = fiveDayAvg;
        tenDayAvgElement.textContent = tenDayAvg;

        const percentageIncrease = calculatePercentageIncrease(parseFloat(fiveDayAvg), parseFloat(tenDayAvg));
        applyConditionalFormatting(fiveDayAvgElement, percentageIncrease);
      }
    });
  }

  function handleIntersection(entries, observer) {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        console.log("Chart container is in view. Loading Chart.js...");
        loadChartJsAndInitializeCharts();
        observer.unobserve(entry.target);
      }
    });
  }

  const observer = new IntersectionObserver(handleIntersection, {
    root: null,
    threshold: 0.1
  });

  const chartContainers = document.querySelectorAll('.nad');
  chartContainers.forEach(container => observer.observe(container));
});
</script>

<style>
  .nad {
    width: 100%;
    border-collapse: collapse;
    margin-top: 2rem;
  }

  .average[data-after]::after {
    content: attr(data-after);
    margin-left: 10px;
  }

  .value {
    width: 80px;
  }

  .canvas {
    height: 60px !important;
  }

  .percentage {
    font-weight: 600;
  }

  th {
    text-align: left;
  }

  td {
    border-bottom: 1px solid #222;
  }

  .trend canvas {
    max-width: 300px; /* Ensure the chart is never wider than 300px */
    width: 100%; /* Allow the chart to be responsive */
  }

  @media screen and (max-width: 768px) {
    .data__table {
      margin-top: 1rem;
    }
    th {
      display: none !important;
    }

    td {
      display: grid !important;
      grid-template-columns: 13ch auto;
    }

    td:first-child {
      padding-top: 1rem;
    }

    td:last-child {
      padding-bottom: 1rem;
    }

    td::before {
      content: attr(data-cell) ": ";
      font-weight: 700;
    }

    .trend::before {
      content: "Trend";
    }

    .aggregate td {
      font-weight: 700;
      border-bottom: none;
    }

    .aggregate td:last-child {
      border-bottom: #222 solid 2px;
    }
    .aggregate td:first-child {
      display: none !important;
    }

    .aggregate td:nth-child(2) {
      padding-top: 1rem;
      border-top: #222 solid 2px;
    }

    .average[data-after]::after {
      content: "";
      margin-left: 10px;
    }
  }
</style>
