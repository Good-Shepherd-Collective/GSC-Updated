---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getWestBankDeathsData } from "../../utils/wb_deaths.js";

const { latestReport, fullData } = await getWestBankDeathsData();

function formatDateMMDDYYYY(dateString) {
  const date = new Date(dateString);
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const year = date.getFullYear();
  return `${month}.${day}.${year}`;
}

const formattedMostRecentDate = latestReport
  ? formatDateMMDDYYYY(latestReport.report_date)
  : "N/A";

const categoryData = [
  { category: 'Total Killed', value: latestReport.killed_cum, dailyAverage: latestReport.daily_average_killed, fourteenDayAverage: latestReport.fourteen_day_average_killed },
  { category: 'Total Children Killed', value: latestReport.killed_children_cum, dailyAverage: latestReport.daily_average_killed_children, fourteenDayAverage: latestReport.fourteen_day_average_killed_children },
  { category: 'Total Men Killed', value: latestReport.killed_men_cum, dailyAverage: latestReport.daily_average_killed_men, fourteenDayAverage: latestReport.fourteen_day_average_killed_men },
  { category: 'Total Injured', value: latestReport.injured_cum, dailyAverage: latestReport.daily_average_injured, fourteenDayAverage: latestReport.fourteen_day_average_injured },
  { category: 'Total Children Injured', value: latestReport.injured_children_cum, dailyAverage: latestReport.daily_average_injured_children, fourteenDayAverage: latestReport.fourteen_day_average_injured_children },
  { category: 'Total Men Injured', value: latestReport.injured_men_cum, dailyAverage: latestReport.daily_average_injured_men, fourteenDayAverage: latestReport.fourteen_day_average_injured_men },
  { category: 'Total Settler Attacks', value: latestReport.settler_attacks_cum, dailyAverage: latestReport.daily_average_settler_attacks, fourteenDayAverage: latestReport.fourteen_day_average_settler_attacks },
];

const serializedReports = JSON.stringify(fullData);
---

<BaseLayout
  isBlogPost={true}
  title="Daily Report"
  description="Daily report of settler-colonial violence in the West Bank and East Jerusalem."
>
  <section class="md:px-12 sm:px-8">
    <div class="border-x border-zinc-800 p-8">
      <div style="max-width: 55rem; margin: 0 auto;">
        <h1
          class="text-4xl md:text-6xl xl:text-7xl font-semibold"
          style="margin-bottom: 2.5rem; margin-top: 4.5rem;"
        >
          West Bank & East Jerusalem
        </h1>
        <h2 class="text-2xl mb-4 highlight-red">Deaths and Injuries</h2>
        <p>
          <!-- Your existing paragraph content -->
        </p>
        <h3 class="text-2xl font-semibold mt-8 text-zinc-800">Data for {formattedMostRecentDate}</h3>
        
        {
          fullData.length > 0 ? (
            <table class="data-table">
              <thead>
                <tr class="header border-y border-zinc-800">
                  <th>Categorys</th>
                  <th>Total</th>
                  <th class="average">Daily Avg</th>
                  <th class="average">14-day Avg</th>
                  <th style="width: 300px;">Trend</th>
                </tr>
              </thead>
              <tbody>
                {categoryData.map(({ category, value, dailyAverage, fourteenDayAverage }) => (
                  <tr key={`report-category-${category}`}>
                    <td data-cell="Category">{category}</td>
                    <td data-cell="Total" class="value">
                      {value}
                    </td>
                    <td data-cell="Daily Avg" class="average daily-avg">
                      {dailyAverage?.toFixed(2) || 'N/A'}
                    </td>
                    <td data-cell="14-day Avg" class="average fourteen-day-avg">
                      {fourteenDayAverage?.toFixed(2) || 'N/A'}
                    </td>
                    <td class="trend">
                      <div class="canvas-wrapper">
                        <canvas
                          class="line-chart-style"
                          data-cell="Trend"
                          id={`chart-latest-${category}`}
                          height="60"
                        />
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>No reports available.</p>
          )
        }
        <p class="pt-8">
          <!-- Your existing download links -->
        </p>
        <div
          id="chartData"
          data-reports={serializedReports}
          style="display:none;"
        >
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script type="text/javascript">
  document.addEventListener("DOMContentLoaded", () => {
    console.log("Document is ready");

    async function loadChartJsAndInitializeCharts() {
      console.log("Loading Chart.js dynamically...");

      const chartJsScript = document.createElement("script");
      chartJsScript.src = "https://cdn.jsdelivr.net/npm/chart.js";
      document.body.appendChild(chartJsScript);

      await new Promise((resolve, reject) => {
        chartJsScript.onload = resolve;
        chartJsScript.onerror = reject;
      });

      console.log("Chart.js loaded. Initializing charts...");
      initializeCharts();
    }

    function applyConditionalFormatting(element, dailyAvg, fourteenDayAvg) {
      const percentageDifference = ((fourteenDayAvg - dailyAvg) / dailyAvg) * 100;
      const transparency = Math.min(1, Math.abs(percentageDifference) / 100);
      
      if (fourteenDayAvg < dailyAvg) {
        element.style.backgroundColor = `rgba(40, 169, 224, ${transparency})`;
        element.setAttribute("data-after", "↓");
      } else if (fourteenDayAvg > dailyAvg) {
        element.style.backgroundColor = `rgba(127, 13, 1, ${transparency})`;
        element.setAttribute("data-after", "↑");
      } else {
        element.style.backgroundColor = "";
        element.removeAttribute("data-after");
      }
      element.style.fontWeight = transparency >= 0.6 ? "600" : "normal";
      element.style.color = transparency >= 0.6 ? "white" : "";
    }

    function initializeCharts() {
      const chartDataDiv = document.getElementById("chartData");
      let reports = JSON.parse(chartDataDiv.getAttribute("data-reports"));
      console.log("Reports data:", reports);

      reports.sort(
        (a, b) => new Date(a.report_date) - new Date(b.report_date)
      );

      const categories = [
        { key: 'killed_cum', label: 'Total Killed' },
        { key: 'killed_children_cum', label: 'Total Children Killed' },
        { key: 'killed_men_cum', label: 'Total Men Killed' },
        { key: 'injured_cum', label: 'Total Injured' },
        { key: 'injured_children_cum', label: 'Total Children Injured' },
        { key: 'injured_men_cum', label: 'Total Men Injured' },
        { key: 'settler_attacks_cum', label: 'Total Settler Attacks' },
      ];

      categories.forEach((category) => {
        const labels = reports.map(report => report.report_date);
        const dataValues = reports.map(report => report[category.key]);

        const canvasId = `chart-latest-${category.label}`;
        const canvasElement = document.getElementById(canvasId);
        if (!canvasElement) {
          console.error(`Canvas element not found for ID: ${canvasId}`);
          return;
        }
        const ctx = canvasElement.getContext("2d");

        const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
        gradient.addColorStop(0, "rgba(127, 13, 21, 0.8)");
        gradient.addColorStop(1, "rgba(127, 13, 21, 0.2)");

        new Chart(ctx, {
          type: "line",
          data: {
            labels: labels,
            datasets: [
              {
                label: category.label,
                data: dataValues,
                borderColor: "#7f0d15",
                tension: 0.4,
                borderJoinStyle: "round",
                borderWidth: 2,
                pointRadius: 0,
                backgroundColor: gradient,
                fill: true,
              },
            ],
          },
          options: {
            plugins: {
              legend: {
                display: false,
              },
            },
            scales: {
              x: {
                ticks: {
                  display: false,
                },
                grid: {
                  display: false,
                },
              },
              y: {
                ticks: {
                  display: false,
                },
                grid: {
                  display: false,
                },
              },
            },
          },
        });
      });

      // Apply conditional formatting
      const rows = document.querySelectorAll(".data-table tbody tr");
      rows.forEach((row) => {
        const dailyAvg = parseFloat(row.querySelector(".daily-avg").innerText);
        const fourteenDayAvg = parseFloat(row.querySelector(".fourteen-day-avg").innerText);
        applyConditionalFormatting(row.querySelector(".fourteen-day-avg"), dailyAvg, fourteenDayAvg);
      });
    }

    function handleIntersection(entries, observer) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          console.log("Chart container is in view. Loading Chart.js...");
          loadChartJsAndInitializeCharts();
          observer.unobserve(entry.target);
        }
      });
    }

    const observer = new IntersectionObserver(handleIntersection, {
      root: null,
      threshold: 0.1,
    });

    const chartContainers = document.querySelectorAll(".data-table");
    chartContainers.forEach((container) => observer.observe(container));
  });
</script>