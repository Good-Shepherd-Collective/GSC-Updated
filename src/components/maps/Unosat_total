---
// /Users/cody/Desktop/GSC-Updated/src/components/maps/Unosat_total.astro

import { Image } from 'astro:assets';
import map from "public/images/gaza-roads.png";
import { promises as fs } from 'fs';
import * as path from 'path';

async function readGazaData() {
    const filePath = path.join(process.cwd(), 'src', 'data', 'gaza_data.geojson');
    try {
        const data = await fs.readFile(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('Error reading or parsing Gaza Data:', error);
        return null;
    }
}

function logGazaData(data) {
    console.error('Gaza Data type:', typeof data);
    console.error('Gaza Data:', JSON.stringify(data, null, 2).substring(0, 1000) + '...');
}

function processData(data) {
    if (!data || !data.features || !Array.isArray(data.features)) {
        console.error('Gaza Data is not in the expected format:', data);
        return { governorates: {}, grandTotal: { destroyed: 0, severe: 0, moderate: 0, possible: 0, total: 0 } };
    }

    console.error(`Total features (rows) read: ${data.features.length}`);

    const governorates = {
        'North Gaza': { destroyed: 0, severe: 0, moderate: 0, possible: 0, total: 0 },
        'Gaza': { destroyed: 0, severe: 0, moderate: 0, possible: 0, total: 0 },
        'Deir Al-Balah': { destroyed: 0, severe: 0, moderate: 0, possible: 0, total: 0 },
        'Khan Yunis': { destroyed: 0, severe: 0, moderate: 0, possible: 0, total: 0 },
        'Rafah': { destroyed: 0, severe: 0, moderate: 0, possible: 0, total: 0 }
    };

    let totalDestroyed = 0;
    let totalSevere = 0;
    let totalModerate = 0;
    let totalPossible = 0;

    data.features.forEach(feature => {
        const gov = feature.properties?.Governorate;
        const damageStatus = feature.properties?.Damage_Status_7;

        if (gov && governorates[gov]) {
            if (damageStatus === 3) {
                governorates[gov].destroyed++;
                totalDestroyed++;
            } else if (damageStatus === 2) {
                governorates[gov].severe++;
                totalSevere++;
            } else if (damageStatus === 1) {
                governorates[gov].moderate++;
                totalModerate++;
            } else if (damageStatus === 0) {
                governorates[gov].possible++;
                totalPossible++;
            }

            governorates[gov].total++;
        }
    });

    const grandTotal = {
        destroyed: totalDestroyed,
        severe: totalSevere,
        moderate: totalModerate,
        possible: totalPossible,
        total: totalDestroyed + totalSevere + totalModerate + totalPossible
    };

    console.error(`Sum of individual categories: ${totalDestroyed + totalSevere + totalModerate + totalPossible}`);
    console.error(`Calculated grand total: ${grandTotal.total}`);
    console.error(`Discrepancy: ${data.features.length - grandTotal.total}`);

    return { governorates, grandTotal };
}

const gazaData = await readGazaData();
logGazaData(gazaData);

const { governorates, grandTotal } = processData(gazaData);

const formattedGrandTotal = grandTotal.total.toLocaleString();
const formattedMostRecentSensorDate = gazaData?.features?.[0]?.properties?.SensorDate_7
    ? new Date(gazaData.features[0].properties.SensorDate_7).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' })
    : 'N/A';

console.error('Governorates Data:', JSON.stringify(governorates, null, 2));
console.error('Grand Total:', JSON.stringify(grandTotal, null, 2));
console.error('Formatted Grand Total:', formattedGrandTotal);
console.error('Formatted Most Recent Sensor Date:', formattedMostRecentSensorDate);

---









<!-- Your component template here -->

<section class="md:px-12 sm:px-6 text-white border-zinc-800">
  <div class="border-x border border-zinc-800">
      <h2 class="text-4xl md:text-6xl xl:text-7xl text-white p-10">Gaza Srip Destruction</h2>
      <p class="text-lg md:text-xl p-10">As of {formattedMostRecentSensorDate} the Israeli jjjjstate has either destroyed, severely affected, and partially damaged <span style="text-decoration: underline; text-decoration-color: #FFA500; text-underline-offset: 6px;">{formattedGrandTotal}</span> kilometers of roads.</p>

      <div class="unosat-map-container border-t border-zinc-800">
          <div id="unosatMap" class="map-area">
              <Image class="unosat-map-placeholder border-zinc-800"
                  src={map}
                  alt="A map placeholder"
                  width="900"
                  height="900"
                  loading="lazy"
                  decoding="async"
              />
          </div>
          <div class="info-area border-zinc-800">
              <div id="map-legend" class="map-legend text-white">
                <table class="unosat">
                  <thead>
                      <tr>
                          <th>Region</th>
                          <th style="border-bottom: 5px solid #FF0000;">Destroyed</th>
                          <th style="border-bottom: 5px solid #FFA500;">Severe<br>damage (km)</th>
                          <th style="border-bottom: 5px solid #FFFF00;">Moderate<br>damage (km)</th>
                          <th>Total<br>(km)</th>
                      </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>North Gaza</td>
                      <td id="north-gaza-destroyed">0</td>
                      <td id="north-gaza-severe">0</td>
                      <td id="north-gaza-moderate">0</td>
                      <td id="north-gaza-total">0</td>
                    </tr>
                      <tr>
                          <td>Gaza</td>
                          <td id="gaza-destroyed">0</td>
                          <td id="gaza-severe">0</td>
                          <td id="gaza-moderate">0</td>
                          <td id="gaza-total">0</td>
                      </tr>
                      <tr>
                          <td>Deir Al-Balah</td>
                          <td id="deir-al-balah-destroyed">0</td>
                          <td id="deir-al-balah-severe">0</td>
                          <td id="deir-al-balah-moderate">0</td>
                          <td id="deir-al-balah-total">0</td>
                      </tr>
                      <tr>
                          <td>Khan Yunis</td>
                          <td id="khan-yunis-destroyed">0</td>
                          <td id="khan-yunis-severe">0</td>
                          <td id="khan-yunis-moderate">0</td>
                          <td id="khan-yunis-total">0</td>
                      </tr>
                      <tr>
                          <td>Rafah</td>
                          <td id="rafah-destroyed">0</td>
                          <td id="rafah-severe">0</td>
                          <td id="rafah-moderate">0</td>
                          <td id="rafah-total">0</td>
                      </tr>
                      <tr>
                        <td><strong>Grand Total</strong></td>
                        <td id="grand-total-destroyed">0</td>
                        <td id="grand-total-severe">0</td>
                        <td id="grand-total-moderate">0</td>
                        <td id="grand-total-total">0</td>
                    </tr>
                  </tbody>
              </table>
              </div>
              <div id="unosatText" class="text-info">
                <div class="legend">
                  <div class="legend-item">
                      <div class="legend-color red"></div>
                      <div class="legend-label">Destroyed</div>
                  </div>
                  <div class="legend-item">
                      <div class="legend-color orange"></div>
                      <div class="legend-label">Severe damage</div>
                  </div>
                  <div class="legend-item">
                      <div class="legend-color yellow"></div>
                      <div class="legend-label">Moderate damage</div>
                  </div>
              </div>
                  <h1 class="text-3xl tracking-wide text-balance md:text-4xl text-white">About this map</h1>
                  <p class="unosat-event-data tracking-wide text-white">This map shows the road assessment data for the Gaza Strip, based on UNOSAT analysis. Click on a road segment to view details.</p>
                  <div class="unosat-map-info"></div>
              </div>
          </div>
      </div>
  </div>
</section>

<link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />

<script define:vars={{ gazaData, governorates, grandTotal }}>
  if (typeof window !== 'undefined') {
    const loadScripts = () => {
      const mapboxScript = document.createElement('script');
      mapboxScript.src = "https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js";
      mapboxScript.onload = initializeUnosatMapbox;
      document.head.appendChild(mapboxScript);
    };
  
    const initializeUnosatMapbox = () => {
      mapboxgl.accessToken = 'pk.eyJ1IjoiZ29vZC1zaGVwaGVyZC1jb2xsZWN0aXZlIiwiYSI6ImNsaDUwdXY0ZDIzNnUzZG9nZ3BhYXhuaTQifQ.FX0JA3BbKdy5-IJ5gkDpKw';
  
      const map = new mapboxgl.Map({
        container: 'unosatMap',
        style: 'mapbox://styles/mapbox/dark-v10',
        center: [34.4, 31.4],
        zoom: 9,
        attributionControl: false,
      });
  
      function formatDate(dateString) {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const year = date.getFullYear();
        return `${month}.${day}.${year}`;
      }
  
      function updateTable() {
        let totalDestroyed = 0;
        let totalSevere = 0;
        let totalModerate = 0;
        let totalPossible = 0;
  
        for (const [gov, values] of Object.entries(governorates)) {
          const prefix = gov.toLowerCase().replace(/\s+/g, '-');
          document.getElementById(`${prefix}-destroyed`).textContent = values.destroyed.toFixed(2);
          document.getElementById(`${prefix}-severe`).textContent = values.severe.toFixed(2);
          document.getElementById(`${prefix}-moderate`).textContent = values.moderate.toFixed(2);
          document.getElementById(`${prefix}-total`).textContent = values.total.toFixed(2);
  
          totalDestroyed += values.destroyed;
          totalSevere += values.severe;
          totalModerate += values.moderate;
          totalPossible += values.possible;
        }
  
        document.getElementById('grand-total-destroyed').textContent = grandTotal.destroyed.toFixed(2);
        document.getElementById('grand-total-severe').textContent = grandTotal.severe.toFixed(2);
        document.getElementById('grand-total-moderate').textContent = grandTotal.moderate.toFixed(2);
        document.getElementById('grand-total-total').textContent = grandTotal.total.toFixed(2);
  
        // Log the totals
        // console.log('Total Destroyed:', totalDestroyed);
        // console.log('Total Severely damaged:', totalSevere);
        // console.log('Total Moderately damaged:', totalModerate);
        // console.log('Total Possibly damaged:', totalPossible);
        // console.log('Grand Total:', totalDestroyed + totalSevere + totalModerate + totalPossible);
      }
  
      map.on('load', () => {
        console.log('Map loaded');
        const placeholder = document.querySelector('.unosat-map-placeholder');
        if (placeholder && placeholder.parentNode) {
          placeholder.parentNode.removeChild(placeholder);
        }
  
        map.addSource('unosat-data-source', {
          type: 'geojson',
          data: gazaData,
        });
  
        map.addLayer({
          id: 'unosat-data-layer',
          type: 'circle',
          source: 'unosat-data-source',
          paint: {
            'circle-color': [
              'match',
              ['get', 'Damage_Status_7'],
              3, '#FF0000',
              2, '#FFA500',
              1, '#FFFF00',
              '#FFFFFF' // Default color for any other case
            ],
            'circle-radius': 4
          },
        });
  
        console.log('Layer added');
  
        // Fit the map to the data bounds
        const bounds = new mapboxgl.LngLatBounds();
        gazaData.features.forEach(feature => {
          bounds.extend(feature.geometry.coordinates);
        });
        map.fitBounds(bounds, { padding: 20 });
  
        // Add click event
        map.on('click', 'unosat-data-layer', (e) => {
          const properties = e.features[0].properties;
  
          document.querySelector('#unosatText h1').textContent = `Governate: ${properties.Governorate}`;
          document.querySelector('.unosat-event-data').innerHTML = `
            <div><strong>Municipality:</strong> ${properties.Municipality || 'N/A'}</div>
            <div><strong>Neighborhood:</strong> ${properties.Neighborhood || 'N/A'}</div>
            <div><strong>Damage Status:</strong> ${properties.Damage_Status_7 || 'N/A'}</div>
            <div><strong>Sensor Date:</strong> ${formatDate(properties.SensorDate_7) || 'N/A'}</div>
          `;
  
          map.flyTo({
            center: e.lngLat,
            zoom: 15,
            essential: true,
          });
        });
  
        // Change cursor on hover
        map.on('mouseenter', 'unosat-data-layer', () => {
          map.getCanvas().style.cursor = 'pointer';
        });
  
        map.on('mouseleave', 'unosat-data-layer', () => {
          map.getCanvas().style.cursor = '';
        });
  
        // Update table and log totals
        updateTable();
      });
  
      map.on('error', (e) => {
        console.error('Mapbox error:', e);
      });
    };
  
    const unosatMapContainer = document.getElementById('unosatMap');
    if (unosatMapContainer) {
      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            loadScripts();
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
  
      observer.observe(unosatMapContainer);
    }
  }
  </script>



<style>
  .unosat-map-container {
      width: 100%;
      display: grid;
      grid-template-columns: 3fr 2fr;
      gap: 0;
  }

  .map-area {
      height: 700px;
  }

  .info-area {
      display: flex;
      flex-direction: column;
      max-height: 700px;
      overflow: hidden;
  }

  .map-legend {
      width: 100%;
      overflow: auto;
      max-height: 50%;
      order: 1; 
  }

  .legend {
            display: none;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 20px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            margin-right: 5px;
            border-radius: .2rem;
        }

        .legend-label {
            color: white;
            font-size: 14px;
        }

        .red {
            background-color: #FF0000;
        }

        .orange {
            background-color: #FFA500;
        }

        .yellow {
            background-color: #FFFF00;
        }

  .map-legend table.unosat {
      width: 100%;
      border-collapse: collapse;
      background-color: black;
      white-space: nowrap;
  }

  .map-legend table.unosat td,
  .map-legend table.unosat th {
      border: 1px solid #171717;
      padding: 0.5rem;
      text-align: left;
      font-size: 0.8rem;
      display: table-cell !important;
      max-width: 7ch;
  }

  .text-info {
      padding: 2rem;
      background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23b0b0b0' fill-opacity='0.28' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      order: 2; 
  }

  .unosat-map-placeholder {
      object-fit: cover;
      width: 100%;
      height: 100%;
  }

  .unosat-map-info {
      margin-top: auto;
  }

  .unosat-event-data {
      margin-bottom: 1.5rem;
      display: block;
  }

  @media screen and (max-width: 900px) {
      .unosat-map-container {
          grid-template-columns: 1fr;
      }

      .map-area {
          height: 50vh;
      }

      .info-area {
          max-height: none;
      }

      .map-legend {
          max-height: none;
          overflow-x: auto;
          order: 2;
      }

      .text-info{
        order: 1; 
      }

      .map-legend table.unosat {
          min-width: 500px;
      }

      .legend {
            display: flex;
        }
  }

  @media screen and (max-width: 768px) {
      td:not(.map-legend table.unosat td) {
          display: grid !important;
          grid-template-columns: 9ch auto;
      }

      .map-legend table.unosat td,
      .map-legend table.unosat th {
          font-size: 0.7rem;
          padding: 0.3rem;
      }

      td::before {
      content: attr(data-cell) "";
      font-weight: 700;  
    }
  }
</style>