---
// src/components/landing/HealthMap.astro

import { Image } from 'astro:assets';
import map from "public/images/white-map.png";
import { fetchHealthAttackData } from "../../utils/health_care.js";

async function fetchData() {
  try {
    const healthAttackData = await fetchHealthAttackData();
    return convertToGeoJSON(healthAttackData);
  } catch (error) {
    console.error('Error fetching data:', error);
    return null;
  }
}

function convertToGeoJSON(healthAttackData) {
  function formatDate(dateString) {
    const date = new Date(dateString);
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const year = date.getFullYear();
    return `${month}.${day}.${year}`;
  }

  return {
    type: 'FeatureCollection',
    features: healthAttackData
      .filter(item => item['Geo Precision'] !== '(6) Country')
      .filter(item => !(parseFloat(item.Latitude) === 15.6279522000 && parseFloat(item.Longitude) === 32.5521521508))
      .map(item => ({
        type: 'Feature',
        geometry: {
          type: 'Point',
          coordinates: [parseFloat(item.Longitude), parseFloat(item.Latitude)]
        },
        properties: {
          ...item,
          Date: item.Date ? formatDate(item.Date) : item.Date
        }
      }))
  };
}

const geojsonData = await fetchData();
const geojsonDataSerialized = JSON.stringify(geojsonData);
// console.log('Server-side geojsonDataSerialized:', geojsonDataSerialized);

---

<section class="md:px-12 sm:px-8 text-white border-zinc-800">
    <div class="border-x border border-zinc-800">
    <h2 class="text-4xl md:text-6xl xl:text-7xl text-white p-10">Mapping Health Attacks</h2>

    <div class="map-container border-t border-zinc-800">
        <div id="health-map"><Image class="health-map-placeholder border-zinc-800"
            src={map}
            alt="A map placeholder"
            width="900"
            height="900"
            loading="lazy"
            decoding="async"
          /></div>
          <div id="health-map-text">
            <h1 class="text-3xl tracking-wide text-balance md:text-4xl text-white">About this map</h1>
            <p class="event__data tracking-wide">Click on the red dot to zoom and view the data.<br><br>This map displays reported attacks on healthcare facilities and workers. The data is sourced from various reports and may not be exhaustive. Each point represents an incident, and clicking on it will provide more details about the event.</p>
            <div class="map__info">
            </div>
          </div>
    </div>
    </div>
</section>

<link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />

<script define:vars={{ geojsonDataSerialized }}>
    // console.log('Health Map: Client-side script starting');
  
    if (typeof window !== 'undefined') {
      // console.log('Health Map: Window is defined, script is running');
  
      const loadHealthMapboxScript = () => {
        // console.log('Health Map: Loading Mapbox script');
        const script = document.createElement('script');
        script.src = "https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js";
        script.onload = () => {
          // console.log('Health Map: Mapbox script loaded successfully');
          initializeHealthMapbox();
        };
        script.onerror = (error) => {
          console.error('Health Map: Error loading Mapbox script:', error);
        };
        document.head.appendChild(script);
      };
  
      const initializeHealthMapbox = () => {
        // console.log('Health Map: Initializing Mapbox');
        if (typeof mapboxgl === 'undefined') {
          console.error('Health Map: mapboxgl is not defined');
          return;
        }
        mapboxgl.accessToken = 'pk.eyJ1IjoiZ29vZC1zaGVwaGVyZC1jb2xsZWN0aXZlIiwiYSI6ImNsaDUwdXY0ZDIzNnUzZG9nZ3BhYXhuaTQifQ.FX0JA3BbKdy5-IJ5gkDpKw';
  
        try {
          // console.log('Health Map: Creating Mapbox instance');
          const mapContainer = document.getElementById('health-map');
          if (!mapContainer) {
            console.error('Health Map: Map container not found');
            return;
          }
          const healthMap = new mapboxgl.Map({
            container: 'health-map',
            style: 'mapbox://styles/good-shepherd-collective/cly02wxxk002z01nw32eb5xqz',
            center: [34.4668, 31.5017], // Center on Gaza
            zoom: 9, // Initial zoom level
            attributionControl: false,
          });
  
          healthMap.on('load', () => {
            // console.log('Health Map: Map loaded');
            const placeholder = document.querySelector('.health-map-placeholder');
            if (placeholder && placeholder.parentNode) {
              placeholder.parentNode.removeChild(placeholder);
              // console.log('Health Map: Placeholder removed');
            }
  
            try {
              // console.log('Health Map: Parsing GeoJSON data');
              const geojsonData = JSON.parse(geojsonDataSerialized);
              // console.log(`Health Map: GeoJSON data parsed, number of features: ${geojsonData.features.length}`);
  
              if (!geojsonData || !geojsonData.features || geojsonData.features.length === 0) {
                console.error('Health Map: GeoJSON data is empty or invalid');
                return;
              }
  
              // console.log('Health Map: Adding source to map');
              healthMap.addSource('health-attack-data', {
                type: 'geojson',
                data: geojsonData,
              });
  
              // console.log('Health Map: Adding layer to map');
              healthMap.addLayer({
                id: 'health-attack-layer',
                type: 'circle',
                source: 'health-attack-data',
                paint: {
                  'circle-radius': 5,
                  'circle-color': '#7f0d15',
                  'circle-opacity': 0.75,
                  'circle-stroke-width': 1,
                  'circle-stroke-color': 'white'
                },
              });
  
              // Fit map to the bounds of our data
              const bounds = new mapboxgl.LngLatBounds();
              geojsonData.features.forEach(feature => {
                bounds.extend(feature.geometry.coordinates);
              });
  
              if (!bounds.isEmpty()) {
                healthMap.fitBounds(bounds, { padding: 50 });
              } else {
                // console.log('Health Map: No valid coordinates found, setting view to Gaza City');
                healthMap.setCenter([34.4668, 31.5017]); // Gaza City coordinates
                healthMap.setZoom(10);
              }
  
              // console.log('Health Map: Setting up event listeners');
              healthMap.on('mouseenter', 'health-attack-layer', () => {
                healthMap.getCanvas().style.cursor = 'pointer';
              });
  
              healthMap.on('mouseleave', 'health-attack-layer', () => {
                healthMap.getCanvas().style.cursor = '';
              });
  
              healthMap.on('click', 'health-attack-layer', (e) => {
  // console.log('Health Map: Layer clicked', e.features[0]);
  if (e.features.length > 0) {
    const feature = e.features[0];
    const coordinates = feature.geometry.coordinates.slice();
    const properties = feature.properties;

    let content = '';
    
    // Format the date
    const date = new Date(properties['Date']);
    const formattedDate = `${date.getMonth() + 1}.${date.getDate().toString().padStart(2, '0')}.${date.getFullYear()}`;
    
    // Set the title (date)
    document.querySelector('#health-map-text h1').textContent = formattedDate;
    
    // Add the description
    content += `<div class="tracking-wide"><strong>Description</strong> ${properties['Event Description']}</div><br>`;

    // Add other properties
    for (const [key, value] of Object.entries(properties)) {
      if (value !== null && value !== '0' && value !== 0 && !key.startsWith('#') && 
          key !== 'Date' && key !== 'Event Description' && key !== 'Reported Perpetrator') {
        if (key === 'Reported Perpetrator Name') {
          content += `<div class="tracking-wide"><strong>Perpetrator:</strong> ${value}</div>`;
        } else if (key === 'Geo Precision') {
          content += `<div class="tracking-wide"><strong>Location Accuracy:</strong> ${value}</div>`;
        } else {
          content += `<div class="tracking-wide"><strong>${key}:</strong> ${value}</div>`;
        }
      }
    }

    document.querySelector('#health-map-text .event__data').innerHTML = content;

    healthMap.flyTo({
      center: coordinates,
      zoom: 14,
      essential: true,
    });
  }
});
  
            } catch (error) {
             // console.error('Health Map: Error setting up map data:', error);
            }
          });
  
          healthMap.on('error', (error) => {
            // console.error('Health Map: Mapbox error:', error);
          });
  
        } catch (error) {
         // console.error('Health Map: Error creating Mapbox instance:', error);
        }
      };
  
      // console.log('Health Map: Setting up Intersection Observer');
      const mapContainer = document.getElementById('health-map');
      if (mapContainer) {
        const observer = new IntersectionObserver((entries, observer) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              // console.log('Health Map: Map container is visible, loading Mapbox');
              loadHealthMapboxScript();
              observer.unobserve(entry.target);
            }
          });
        }, { threshold: 0.1 });
  
        observer.observe(mapContainer);
      } else {
        console.error('Health Map: Map container not found');
      }
    } else {
      // console.log('Health Map: Window is not defined, script not running');
    }
  </script>

<style>
    .health-map-placeholder {
      object-fit: cover;
    }
  
    .map__info {
      margin-top: auto;
      margin-bottom: 0;
    }
  
    .event__data {
      margin-bottom: 1.5rem !important;
      display: block;
    }
  
    .map-container {
      width: 100%;
      display: grid;
      grid-template-areas: "map text";
      grid-template-columns: 1fr 1fr;
      z-index: 0 !important; 
    }
  
    #health-map {
      grid-area: map;
      width: 100%;
      height: 600px;
      z-index: 0;
    }
  
    #health-map-text {
      display: grid;
      height: 100%;
      position: relative;
      grid-area: text;
      padding: 2rem;
      background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23b0b0b0' fill-opacity='0.28' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
    }
  
    @media (max-width: 900px) {
      .map-container {
        grid-template-areas: "map map" "text text";
        grid-template-columns: 1fr 1fr;
      }
      #health-map {
        grid-area: map;
        width: 100%;
        height: 50vh;
      }
    }
  </style>