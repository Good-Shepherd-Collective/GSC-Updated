---
import { Image } from 'astro:assets';
import map from "public/images/gaza-roads.png";
import EleventyFetch from "@11ty/eleventy-fetch";

const unosatEndpoint = 'https://us-east-1.aws.data.mongodb-api.com/app/unosat-gaza-gyepzoy/endpoint/gazaunosat';

async function fetchUnosatData() {
  try {
    const response = await EleventyFetch(unosatEndpoint, {
      duration: "1d", // Cache for 1 day
      type: "json"    // Expect JSON response
    });
    
    return JSON.parse(response.body);
  } catch (error) {
    console.error('Error fetching UNOSAT data:', error);
    return null;
  }
}

const unosatData = await fetchUnosatData();

// Calculate grand total and find most recent sensor date
let grandTotal = 0;
let mostRecentSensorDate = new Date(0);

if (unosatData && unosatData.features) {
  unosatData.features.forEach(feature => {
    grandTotal += feature.properties.Length_km;
    const sensorDate = new Date(feature.properties.SensorDate);
    if (sensorDate > mostRecentSensorDate) {
      mostRecentSensorDate = sensorDate;
    }
  });
}

// Format the date
const formatDate = (date) => {
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const year = date.getFullYear();
  return `${month}.${day}.${year}`;
};

const formattedMostRecentSensorDate = formatDate(mostRecentSensorDate);
const formattedGrandTotal = grandTotal.toFixed(2);

const unosatDataSerialized = JSON.stringify(unosatData);
---

<section class="md:px-12 sm:px-6 text-white border-zinc-800">
    <div class="border-x border border-zinc-800">
        <h2 class="text-4xl md:text-6xl xl:text-7xl text-white p-10">Gaza Strip Road Assessment</h2>
        <p class="text-lg md:text-xl p-10">As of {formattedMostRecentSensorDate} the Israeli state has either destroyed, severely affected, and partially damaged <span style="text-decoration: underline; text-decoration-color: #FFA500; text-underline-offset: 6px;">{formattedGrandTotal}</span> kilometers of roads.</p>

        <div class="unosat-map-container border-t border-zinc-800">
            <div id="unosatMap" class="map-area">
                <Image class="unosat-map-placeholder border-zinc-800"
                    src={map}
                    alt="A map placeholder"
                    width="900"
                    height="900"
                    loading="lazy"
                    decoding="async"
                />
            </div>
            <div class="info-area border-zinc-800">
                <div id="map-legend" class="map-legend text-white">
                  <table class="unosat">
                    <thead>
                        <tr>
                            <th>Region</th>
                            <th style="border-bottom: 5px solid #FF0000;">Destroyed</th>
                            <th style="border-bottom: 5px solid #FFA500;">Severe<br>damage (km)</th>
                            <th style="border-bottom: 5px solid #FFFF00;">Moderate<br>damage (km)</th>
                            <th>Total<br>(km)</th>
                        </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>North Gaza</td>
                        <td id="north-gaza-destroyed">0</td>
                        <td id="north-gaza-severe">0</td>
                        <td id="north-gaza-moderate">0</td>
                        <td id="north-gaza-total">0</td>
                      </tr>
                        <tr>
                            <td>Gaza</td>
                            <td id="gaza-destroyed">0</td>
                            <td id="gaza-severe">0</td>
                            <td id="gaza-moderate">0</td>
                            <td id="gaza-total">0</td>
                        </tr>
                        <tr>
                            <td>Deir Al-Balah</td>
                            <td id="deir-al-balah-destroyed">0</td>
                            <td id="deir-al-balah-severe">0</td>
                            <td id="deir-al-balah-moderate">0</td>
                            <td id="deir-al-balah-total">0</td>
                        </tr>
                        <tr>
                            <td>Khan Yunis</td>
                            <td id="khan-yunis-destroyed">0</td>
                            <td id="khan-yunis-severe">0</td>
                            <td id="khan-yunis-moderate">0</td>
                            <td id="khan-yunis-total">0</td>
                        </tr>
                        <tr>
                            <td>Rafah</td>
                            <td id="rafah-destroyed">0</td>
                            <td id="rafah-severe">0</td>
                            <td id="rafah-moderate">0</td>
                            <td id="rafah-total">0</td>
                        </tr>
                        <tr>
                          <td><strong>Grand Total</strong></td>
                          <td id="grand-total-destroyed">0</td>
                          <td id="grand-total-severe">0</td>
                          <td id="grand-total-moderate">0</td>
                          <td id="grand-total-total">0</td>
                      </tr>
                    </tbody>
                </table>
                </div>
                <div id="unosatText" class="text-info">
                  <div class="legend">
                    <div class="legend-item">
                        <div class="legend-color red"></div>
                        <div class="legend-label">Destroyed</div>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color orange"></div>
                        <div class="legend-label">Severe damage</div>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color yellow"></div>
                        <div class="legend-label">Moderate damage</div>
                    </div>
                </div>
                    <h1 class="text-3xl tracking-wide text-balance md:text-4xl text-white">About this map</h1>
                    <p class="unosat-event-data tracking-wide text-white">This map shows the road assessment data for the Gaza Strip, based on UNOSAT analysis. Click on a road segment to view details.</p>
                    <div class="unosat-map-info"></div>
                </div>
            </div>
        </div>
    </div>
</section>

<link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />

<script define:vars={{ unosatDataSerialized }}>
  if (typeof window !== 'undefined') {
    const loadScripts = () => {
      const proj4Script = document.createElement('script');
      proj4Script.src = "https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.7.5/proj4.js";
      proj4Script.onload = () => {
        const mapboxScript = document.createElement('script');
        mapboxScript.src = "https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js";
        mapboxScript.onload = initializeUnosatMapbox;
        document.head.appendChild(mapboxScript);
      };
      document.head.appendChild(proj4Script);
    };
  
    const initializeUnosatMapbox = () => {
      mapboxgl.accessToken = 'pk.eyJ1IjoiZ29vZC1zaGVwaGVyZC1jb2xsZWN0aXZlIiwiYSI6ImNsaDUwdXY0ZDIzNnUzZG9nZ3BhYXhuaTQifQ.FX0JA3BbKdy5-IJ5gkDpKw';
  
      const map = new mapboxgl.Map({
        container: 'unosatMap',
        style: 'mapbox://styles/mapbox/dark-v10',
        center: [34.4, 31.4],
        zoom: 9,
        attributionControl: false,
      });
  
      function formatDate(dateString) {
        const date = new Date(dateString);
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const year = date.getFullYear();
        return `${month}.${day}.${year}`;
      }
  
      function updateTable(data) {
  console.log('Starting updateTable function');
  console.log('Total features:', data.features.length);

  const governorates = {
    'North Gaza': { destroyed: 0, severe: 0, moderate: 0, total: 0 },
    'Gaza': { destroyed: 0, severe: 0, moderate: 0, total: 0 },
    'Deir Al-Balah': { destroyed: 0, severe: 0, moderate: 0, total: 0 },
    'Khan Yunis': { destroyed: 0, severe: 0, moderate: 0, total: 0 },
    'Rafah': { destroyed: 0, severe: 0, moderate: 0, total: 0 }
  };

  const uniqueGovernorates = new Set();
  const damageTypes = new Set();

  data.features.forEach((feature, index) => {
    let gov = feature.properties.Governorate;
    const damage = feature.properties.UNHabitat_DL;
    const length = feature.properties.Length_km;

    console.log(`Feature ${index}:`, { gov, damage, length });

    uniqueGovernorates.add(gov);
    damageTypes.add(damage);

    // Normalize governorate names
    gov = gov.replace(/\s+/g, ' ').trim();
    if (gov.toLowerCase().includes('north')) gov = 'North Gaza';
    if (gov.toLowerCase().includes('deir')) gov = 'Deir Al-Balah';
    if (gov.toLowerCase().includes('khan')) gov = 'Khan Yunis';

    if (governorates[gov]) {
      if (damage === 'Destroyed') governorates[gov].destroyed += length;
      else if (damage === 'Severely affected') governorates[gov].severe += length;
      else if (damage === 'Moderately affected') governorates[gov].moderate += length;
      governorates[gov].total += length;
    } else {
      console.warn(`Unknown governorate: ${gov}`);
    }
  });

  console.log('Unique governorates:', Array.from(uniqueGovernorates));
  console.log('Damage types:', Array.from(damageTypes));
  console.log('Calculated governorate data:', governorates);

  const grandTotal = {
    destroyed: 0,
    severe: 0,
    moderate: 0,
    total: 0
  };

  for (const [gov, values] of Object.entries(governorates)) {
    const prefix = gov.toLowerCase().replace(/\s+/g, '-');
    console.log(`Looking for elements with prefix: ${prefix}`);
    const destroyedEl = document.getElementById(`${prefix}-destroyed`);
    const severeEl = document.getElementById(`${prefix}-severe`);
    const moderateEl = document.getElementById(`${prefix}-moderate`);
    const totalEl = document.getElementById(`${prefix}-total`);

    console.log(`Updating ${gov}:`, values);
    console.log(`Elements: destroyed=${destroyedEl}, severe=${severeEl}, moderate=${moderateEl}, total=${totalEl}`);

    if (destroyedEl) destroyedEl.textContent = values.destroyed.toFixed(2);
    if (severeEl) severeEl.textContent = values.severe.toFixed(2);
    if (moderateEl) moderateEl.textContent = values.moderate.toFixed(2);
    if (totalEl) totalEl.textContent = values.total.toFixed(2);

    // Accumulate grand totals
    grandTotal.destroyed += values.destroyed;
    grandTotal.severe += values.severe;
    grandTotal.moderate += values.moderate;
    grandTotal.total += values.total;
  }

  document.getElementById('grand-total-destroyed').textContent = grandTotal.destroyed.toFixed(2);
  document.getElementById('grand-total-severe').textContent = grandTotal.severe.toFixed(2);
  document.getElementById('grand-total-moderate').textContent = grandTotal.moderate.toFixed(2);
  document.getElementById('grand-total-total').textContent = grandTotal.total.toFixed(2);

  console.log('Finished updateTable function');
}
  
      map.on('load', () => {
        console.log('Map loaded');
        const placeholder = document.querySelector('.unosat-map-placeholder');
        if (placeholder && placeholder.parentNode) {
          placeholder.parentNode.removeChild(placeholder);
        }
  
        try {
          const unosatData = JSON.parse(unosatDataSerialized);
          console.log('Parsed UNOSAT data:', unosatData);
  
          if (!unosatData || !unosatData.features || unosatData.features.length === 0) {
            console.error('No features found in UNOSAT data');
            return;
          }
  
          // Transform coordinates from EPSG:3857 to EPSG:4326
          unosatData.features.forEach(feature => {
            if (feature.geometry && feature.geometry.coordinates) {
              feature.geometry.coordinates = feature.geometry.coordinates.map(coordSet => 
                coordSet.map(coord => 
                  proj4('EPSG:3857', 'EPSG:4326', [coord[0], coord[1]])
                )
              );
            }
          });
  
          map.addSource('unosat-data-source', {
            type: 'geojson',
            data: unosatData,
          });
  
          map.addLayer({
            id: 'unosat-data-layer',
            type: 'line',
            source: 'unosat-data-source',
            paint: {
              'line-color': [
                'match',
                ['get', 'UNHabitat_DL'],
                'Destroyed', '#FF0000',
                'Severely affected', '#FFA500',
                'Moderately affected', '#FFFF00',
                '#FFFFFF' // Default color for any other case
              ],
              'line-width': 2
            },
          });
  
          console.log('Layer added');
  
          // Fit the map to the data bounds
          const bounds = new mapboxgl.LngLatBounds();
          unosatData.features.forEach(feature => {
            if (feature.geometry && feature.geometry.coordinates) {
              feature.geometry.coordinates.forEach(coordSet => {
                coordSet.forEach(coord => {
                  bounds.extend(coord);
                });
              });
            }
          });
          map.fitBounds(bounds, { padding: 20 });
  
          // Add click event
          map.on('click', 'unosat-data-layer', (e) => {
            const properties = e.features[0].properties;
  
            document.querySelector('#unosatText h1').textContent = `Governate: ${properties.Governorate}`;
            document.querySelector('.unosat-event-data').innerHTML = `
              <div><strong>Road Type:</strong> ${properties.RoadType || 'N/A'}</div>
              <div><strong>Damage Level:</strong> ${properties.UNHabitat_DL || 'N/A'}</div>
              <div><strong>Length:</strong> ${properties.Length_km ? properties.Length_km.toFixed(2) + ' km' : 'N/A'}</div>
              <div><strong>Sensor Date:</strong> ${formatDate(properties.SensorDate) || 'N/A'}</div>
            `;
  
            map.flyTo({
              center: e.lngLat,
              zoom: 15,
              essential: true,
            });
          });
  
          // Change cursor on hover
          map.on('mouseenter', 'unosat-data-layer', () => {
            map.getCanvas().style.cursor = 'pointer';
          });
  
          map.on('mouseleave', 'unosat-data-layer', () => {
            map.getCanvas().style.cursor = '';
          });
  
          // Update table
          updateTable(unosatData);
  
        } catch (error) {
          console.error('Error setting up the map:', error);
        }
      });
  
      map.on('error', (e) => {
        console.error('Mapbox error:', e);
      });
    };
  
    const unosatMapContainer = document.getElementById('unosatMap');
    if (unosatMapContainer) {
      const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            loadScripts();
            observer.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1 });
  
      observer.observe(unosatMapContainer);
    }
  }
  </script>

<style>
  .unosat-map-container {
      width: 100%;
      display: grid;
      grid-template-columns: 3fr 2fr;
      gap: 0;
  }

  .map-area {
      height: 700px;
  }

  .info-area {
      display: flex;
      flex-direction: column;
      max-height: 700px;
      overflow: hidden;
  }

  .map-legend {
      width: 100%;
      overflow: auto;
      max-height: 50%;
      order: 1; 
  }

  .legend {
            display: none;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-right: 20px;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            margin-right: 5px;
            border-radius: .2rem;
        }

        .legend-label {
            color: white;
            font-size: 14px;
        }

        .red {
            background-color: #FF0000;
        }

        .orange {
            background-color: #FFA500;
        }

        .yellow {
            background-color: #FFFF00;
        }

  .map-legend table.unosat {
      width: 100%;
      border-collapse: collapse;
      background-color: black;
      white-space: nowrap;
  }

  .map-legend table.unosat td,
  .map-legend table.unosat th {
      border: 1px solid #171717;
      padding: 0.5rem;
      text-align: left;
      font-size: 0.8rem;
      display: table-cell !important;
      max-width: 7ch;
  }

  .text-info {
      padding: 2rem;
      background-image: url("data:image/svg+xml,%3Csvg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23b0b0b0' fill-opacity='0.28' fill-rule='evenodd'%3E%3Cpath d='M5 0h1L0 6V5zM6 5v1H5z'/%3E%3C/g%3E%3C/svg%3E");
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      overflow-y: auto;
      order: 2; 
  }

  .unosat-map-placeholder {
      object-fit: cover;
      width: 100%;
      height: 100%;
  }

  .unosat-map-info {
      margin-top: auto;
  }

  .unosat-event-data {
      margin-bottom: 1.5rem;
      display: block;
  }

  @media screen and (max-width: 900px) {
      .unosat-map-container {
          grid-template-columns: 1fr;
      }

      .map-area {
          height: 50vh;
      }

      .info-area {
          max-height: none;
      }

      .map-legend {
          max-height: none;
          overflow-x: auto;
          order: 2;
      }

      .text-info{
        order: 1; 
      }

      .map-legend table.unosat {
          min-width: 500px;
      }

      .legend {
            display: flex;
        }
  }

  @media screen and (max-width: 768px) {
      td:not(.map-legend table.unosat td) {
          display: grid !important;
          grid-template-columns: 9ch auto;
      }

      .map-legend table.unosat td,
      .map-legend table.unosat th {
          font-size: 0.7rem;
          padding: 0.3rem;
      }

      td::before {
      content: attr(data-cell) "";
      font-weight: 700;  
    }
  }
</style>