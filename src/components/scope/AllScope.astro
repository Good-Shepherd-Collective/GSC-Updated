---
import fetch from '@11ty/eleventy-fetch';
import { processDemolitionData } from '../../utils/home_demolitions';
import fetchDailyReport, { formatDateToString, formatTimestamp } from '../../utils/wb_daily';

// Helper function to format numbers with commas
function formatNumbersInObject(obj) {
  if (typeof obj === 'number') {
    return obj.toLocaleString();
  }
  if (typeof obj === 'object' && obj !== null) {
    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        obj[key] = formatNumbersInObject(obj[key]);
      }
    }
  }
  return obj;
}

// Helper function to format date
function formatDate(dateString) {
  const date = new Date(dateString);
  const year = date.getUTCFullYear();
  const month = String(date.getUTCMonth() + 1).padStart(2, '0');
  const day = String(date.getUTCDate()).padStart(2, '0');
  return `${month}.${day}.${year}`;
}

async function fetchSummaryData() {
  const url = 'https://data.techforpalestine.org/api/v3/summary.json';
  try {
    const response = await fetch(url, { duration: '1d', type: 'json' });
    return response ? formatNumbersInObject(response) : null;
  } catch (error) {
    console.error("Fetching summary data failed:", error);
    return null;
  }
}

async function fetchDataAndReports() {
  const [summaryData, dailyReports] = await Promise.all([fetchSummaryData(), fetchDailyReport()]);

  if (!summaryData || !dailyReports) {
    console.error("Failed to fetch or process data.");
    return { summaryData: null, dailyReports: [] };
  }

  return { summaryData, dailyReports };
}

// Fetch data and reports
const { summaryData, dailyReports } = await fetchDataAndReports();

// Determine the most recent report if reports exist
const mostRecentReport = dailyReports.length
  ? dailyReports.reduce((latest, report) => new Date(report.metadata.Date) > new Date(latest.metadata.Date) ? report : latest, dailyReports[0])
  : null;

const mostRecentDate = mostRecentReport ? mostRecentReport.metadata.Date : '';

const categories = ["Settler attacks", "Road closures", "Confiscation of property", "Arrests", "Temporary checkpoints"];
const categoryData = categories.map(category => {
  let categoryItem = mostRecentReport ? mostRecentReport.data.find(item => item["Description English"] === category) : null;
  if (!categoryItem) {
    categoryItem = { "Description English": category, "Value": "0" };
  }
  return {
    category,
    value: categoryItem["Value"],
    date: mostRecentReport ? mostRecentReport.metadata.Date : ''
  };
});

// Fetch demolition data and extract newest date of incident
const demolitionData = await processDemolitionData();
const demolitionDate = demolitionData ? demolitionData.newestDateofincident : '';
---
<section class="md:px-12 sm:px-8">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-px bg-zinc-800 lg:grid-cols-4 border-zinc-800 border-x border-b">
    <!-- Gaza Genocide Section -->
    <div class="col-span-full lg:col-span-2">
      <div class="w-full h-full p-8 lg:px-10 diagonal-stripes">
        <h2 class="text-4xl tracking-wide md:text-5xl xl:text-7xl text-white font-bold">
          Gaza Genocide
        </h2>
        <div class="text-white mt-4 text-2xl tracking-wide">
          From the data accessed on <span class="highlight">{formatDate(summaryData?.gaza?.last_update || '')}</span>, the Israeli regime, backed by the United States, has carried out
          <span class="highlight">{summaryData?.gaza?.massacres || 0}</span> massacres. As a result, Israeli military forces have killed some <span class="highlight">{summaryData?.gaza?.killed?.total || 0}</span> Palestinians in the Gaza Strip alone. This includes <span class="highlight">{summaryData?.gaza?.killed?.children || 0}</span> children and <span class="highlight">{summaryData?.gaza?.killed?.women || 0}</span> women. The Israeli state has also targeted critical emergency services personnel, such as firefighters and medics. As of now, Israel's assault has claimed the lives of <span class="highlight">{summaryData?.gaza?.killed?.civil_defence || 0}</span> workers from this critical sector and killed another <span class="highlight">{summaryData?.gaza?.killed?.medical || 0}</span> medical personal. Additionally, Israel's longstanding policy to stop independent media from reporting essential facts and visual evidence, the Israeli military has assassinated <span class="highlight">{summaryData?.gaza?.killed?.press || 0}</span> members of the press.  
        </div>
      </div>
    </div>
    
    <!-- West Bank & East Jerusalem Section -->
    <div class="bg-black">
      <div class="p-8 inline-flex items-center border-b bg-blue-200 border-zinc-800 w-full flex-col">
        <p class="text-2xl text-black">Violence across the West Bank & East Jerusalem</p>
      </div>
      <div class="divide-y divide-zinc-800" data-section="west-bank">
        <div><p class="f text-white text-sm pl-8 pr-4 py-4">Data as of {formatDate(mostRecentDate || '')}</p></div>
        {categoryData.map(({ category, value, date }) => (
          <div class="px-8 py-4" key={category}>
            <p class="f text-white text-sm">{category} ⏤ {value}</p>
          </div>
        ))}
        <div class="flex items-center h-full border-zinc-800 border-t">
          <a href="/data/wb_data" class="flex items-center h-full text-white hover:text-blue-200 transition-colors duration-300">
            <p class="f text-sm pl-8 pr-4 py-4">More info</p>
            <img class="copy-icon" src="/images/Arrow.svg" alt="Arrow Icon">
          </a>
        </div>
        <div class="flex items-center h-full border-zinc-800 border-t">
          <button id="copyButtonWestBank" class="f text-white text-sm pl-8 pr-4 py-4 flex items-center hover:text-blue-200 transition-colors duration-300">
            <span>Copy Data</span>
            <img class="copy-icon ml-2" src="/images/copy-symbol.svg" alt="Copy Icon">
          </button>
        </div>
      </div>
    </div>

    <!-- Home Demolition Data Section -->
    <div class="bg-black">
      <div class="p-8 inline-flex items-center border-b bg-blue-900 border-zinc-800 w-full polka">
        <p class="text-2xl text-white">Home Demolitions in the West Bank & East Jerusalem</p>
      </div>
      <div class="divide-y divide-zinc-800" data-section="home-demolitions">
        <div class="border-zinc-800"><p class="f text-white text-sm pl-8 pr-4 py-4">Data as of {formatDate(demolitionDate || '')}</p></div>
        <div class="px-8 py-4">
          <p class="f text-white text-sm">Displaced People — {demolitionData?.displacedPeople || 0}</p>
        </div>
        <div class="px-8 py-4">
          <p class="f text-white text-sm">Total Structures — {demolitionData?.structures || 0}</p>
        </div>
        <div class="px-8 py-4">
          <p class="f text-white text-sm">Men Displaced — {demolitionData?.menDisplaced || 0}</p>
        </div>
        <div class="px-8 py-4">
          <p class="f text-white text-sm">Women Displaced — {demolitionData?.womenDisplaced || 0}</p>
        </div>
        <div class="px-8 py-4">
          <p class="f text-white text-sm">Children Displaced — {demolitionData?.childrenDisplaced || 0}</p>
        </div>
        <div class="flex items-center h-full border-zinc-800 border-t">
          <a href="/data/home_demolitions" class="flex items-center h-full text-white hover:text-blue-200 transition-colors duration-300">
            <p class="f text-sm pl-8 pr-4 py-4">More info</p>
            <img class="copy-icon" src="/images/Arrow.svg" alt="Arrow Icon">
          </a>
        </div>
        <div class="flex items-center h-full border-zinc-800 border-t">
          <button id="copyButtonHomeDemolitions" class="f text-white text-sm pl-8 pr-4 py-4 flex items-center hover:text-blue-200 transition-colors duration-300">
            <span>Copy Data</span>
            <img class="copy-icon ml-2" src="/images/copy-symbol.svg" alt="Copy Icon">
          </button>
        </div>
      </div>
    </div>
  </div>
</section>


<script>
  // Function to copy data from a section and change button text
function copyData(sectionId, buttonId, url) {
  const section = document.querySelector(sectionId);
  const textToCopy = Array.from(section.querySelectorAll('p')).map(p => p.textContent).join('\n');
  const textWithLink = `${textToCopy}\nMore info at ${url}`;

  navigator.clipboard.writeText(textWithLink)
    .then(() => {
      const copyButton = document.getElementById(buttonId);
      copyButton.querySelector('span').textContent = 'Copied!';
      setTimeout(() => {
        copyButton.querySelector('span').textContent = 'Copy Data';
      }, 2000); // Revert text after 2 seconds
    })
    .catch(err => {
      console.error('Failed to copy text:', err);
    });
}

// Event listeners for copy buttons
document.getElementById('copyButtonWestBank').addEventListener('click', () => {
  copyData('[data-section="west-bank"]', 'copyButtonWestBank', 'https://goodshepherdcollective.org/data/wb_data');
});

document.getElementById('copyButtonHomeDemolitions').addEventListener('click', () => {
  copyData('[data-section="home-demolitions"]', 'copyButtonHomeDemolitions', 'https://goodshepherdcollective.org/data/home_demolitions');
});


</script>



